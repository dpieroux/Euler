{-------------------------------------------------------------------------------

If we are presented with the first k terms of a sequence it is impossible to say
with certainty the value of the next term, as there are infinitely many
polynomial functions that can model the sequence.

As an example, let us consider the sequence of cube numbers. This is defined by
the generating function, u(n) = n³: 1, 8, 27, 64, 125, 216, ...

Suppose we were only given the first two terms of this sequence. Working on the
principle that "simple is best" we should assume a linear relationship and
predict the next term to be 15 (common difference 7). Even if we were presented
with the first three terms, by the same principle of simplicity, a quadratic
relationship should be assumed.

We shall define OP(k, n) to be the nth term of the optimum polynomial generating
function for the first k terms of a sequence. It should be clear that OP(k, n)
will accurately generate the terms of the sequence for n ≤ k, and potentially
the first incorrect term (FIT) will be OP(k, k+1); in which case we shall call
it a bad OP (BOP).

As a basis, if we were only given the first term of sequence, it would be most
sensible to assume constancy; that is, for n ≥ 2, OP(1, n) = u1.

Hence we obtain the following OPs for the cubic sequence: 
    OP(1, n) = 1            1, *1*, 1, 1, ... 
    OP(2, n) = 7n−6         1, 8, *15*, ... 
    OP(3, n) = 6n²−11n+6    1, 8, 27, *58*, ... 
    OP(4, n) = n³           1, 8, 27, 64, 125, ...

Clearly no BOPs exist for k ≥ 4.

By considering the sum of FITs generated by the BOPs (indicated in red above),
we obtain 1 + 15 + 58 = 74.

Consider the following tenth degree polynomial generating function:

u(n) = 1 − n + n² − n³ + n⁴ − n⁵ + n⁶ − n⁷ + n⁸ − n⁹ + n¹⁰

Find the sum of FITs for the BOPs.

-------------------------------------------------------------------------------}

import Data.Ratio
import Math.Polynomial
import Math.Polynomial.Type
import Math.Polynomial.Interpolation

-- The generating function
p :: Poly Rational
p = poly LE [(-1)^p | p <- [0.. 10]]

-- The actual values
actualPoints' :: [Rational]
actualPoints' = [evalPoly p n | n <- [1 .. ]]

actualPoints :: [Integer]
actualPoints = map numerator actualPoints'

-- The value evaluated by the approximated polynomial
evaluatedPoints :: Int -> [Integer]
evaluatedPoints order = let p' = polyInterp (take order (zip [1..] actualPoints'))
                        in  [numerator $ p' n | n <- [1 .. ]]

-- Returns the FIT for a given order
fit :: Int -> Integer
fit order = snd . head 
          $ filter (\(a, e) -> a /= e) 
          $ zip actualPoints (evaluatedPoints order)

main = do
    print $ sum $ map fit [1..10]